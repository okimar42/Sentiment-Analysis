name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: sentiment_analysis
          POSTGRES_USER: sentiment_analysis
          POSTGRES_PASSWORD: sentiment_analysis
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U sentiment_analysis" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    env:
      DATABASE_URL: postgres://sentiment_analysis:sentiment_analysis@localhost:5432/sentiment_analysis
      REDIS_URL: redis://localhost:6379/0
      DJANGO_SETTINGS_MODULE: core.settings
      PYTHONUNBUFFERED: 1
      NODE_ENV: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          python manage.py migrate
          pytest --maxfail=3 --disable-warnings -q --cov=. --cov-report=xml | tee ../backend-test-results.txt
          mv coverage.xml ../backend-coverage.xml

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --ci --coverage | tee ../frontend-test-results.txt
          cp coverage/lcov.info ../frontend-lcov.info

      - name: Run backend integrity tests
        run: |
          cd backend
          pytest sentiment_analysis/tests/test_integrity.py --maxfail=3 --disable-warnings -q | tee ../backend-integrity-results.txt

      - name: Lint backend
        run: |
          cd backend
          flake8 .

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      # Job summary for test results
      - name: Upload test results summary
        if: always()
        run: |
          echo '### Backend Test Results' >> $GITHUB_STEP_SUMMARY
          cat backend-test-results.txt >> $GITHUB_STEP_SUMMARY
          echo '### Frontend Test Results' >> $GITHUB_STEP_SUMMARY
          cat frontend-test-results.txt >> $GITHUB_STEP_SUMMARY
          echo '### Backend Integrity Test Results' >> $GITHUB_STEP_SUMMARY
          cat backend-integrity-results.txt >> $GITHUB_STEP_SUMMARY

      # Upload coverage artifacts
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend-coverage.xml
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend-lcov.info

      # Upload to Codecov if token is set
      - name: Upload coverage to Codecov
        if: env.CODECOV_TOKEN != null
        uses: codecov/codecov-action@v3
        with:
          files: backend-coverage.xml,frontend-lcov.info
          flags: backend,frontend
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # Deploy to production if on main branch
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          echo 'Deploying to production...'
          # Insert real deployment logic here (e.g., Docker push, SSH, Vercel CLI, etc.) 